syntax = "proto3";

package fpcp;

// All methods(exception is authenticate()) of SceneProcessorService should be invoked
// with non-null "session_id" (fucking gRPC silently transcode to lowercase!) methadata key value. 
// Session Provider will reject the call if the session_id is not known (invalid) and response 
// appropriate error by "error" key in trailing metadata value. 
// 
// Known "error" trailing values:
// "1" - means "Unknown session id. Authentication requred". Session is not known, or not obtained. Please 
// see authenticate() method call.
// "2" - means "Authentication failed". Invalid credentials provided.
// "3" - server reports "Unable to run. Try again later". Means that server cannor perform the operation for a reason
service SceneProcessorService {

	// Authenticates the client. Server will respond appropriate "session_id" or "error".
	rpc authenticate(AuthToken) returns (Void); 

	// Sends the client scene information. 
 	rpc onScene(Scene) returns (Void); 
}

// Just use it like an empty message
message Void {

}

message Size {
	uint32 width = 1;
	uint32 height = 2;
}

message Rectangle {
	int32 left = 1;
	int32 top = 2;
	int32 right = 3;
	int32 bottom = 4;
}

message AuthToken {
	string access = 1;
	string secret = 2;
}

message Scene {
	// The scene identificator. FP changes it when considers new scene
    string id = 1;

    // The timestampt indicastes when FP catches the scene
    uint64 since = 2;

    // Number of persons on the scene. Current frame can contain another 
    // number of faces (equal or less than reported), this is because not
    // all faces can be detected at the time
    int32 persons = 3;
	
    // Current frame, contains image of the scene
	Frame frame = 4;

	// list of faces catched on the frame. This list can contain NOT ALL scene
	// persons, but only that catched on the frame. so the number of faces in the list
	// can be less than expected (persons) 
	repeated Face faces = 5;
}

message Frame {
	string id = 1;
	uint64 timestamp = 2;
	Size size = 3;
	bytes data = 4;
	enum Format {
		RAW = 0;
		PNG = 1;
	}
	Format format = 5;
}

message Face {
	string id = 1;
	Rectangle rect = 2;
	repeated float vector = 3;
}